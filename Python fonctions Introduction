{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/net4troll/DS-GMC-WS/blob/main/Ali_REZOUALI___python_fonctions.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "87e42XfJH0Qe"
      },
      "source": [
        "**Q1: Write a Python function to find the Max of three numbers.**\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dyFblonxH0Qg",
        "outputId": "1db8dcbf-5790-42bf-9c70-47b7191227db"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "def  max(a,b,c):\n",
        "    if a>b and a>c:\n",
        "        return a\n",
        "    elif b>c:\n",
        "        return b\n",
        "    return c\n",
        "max(99.3,100,60)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VzZvy2gjH0Qh"
      },
      "source": [
        "**Q2: Write a function calculation() such that it can accept two variables and calculate the addition and subtraction of it. And also it must return both addition and subtraction in a single return call. For example: calculation(40, 10) should produce 50, 30**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PcdmFY0TH0Qi",
        "outputId": "c15034e5-95d4-4337-aad4-f6e0bde96d5b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50, 30)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "def calculation(x,y):\n",
        "    return x+y , x-y\n",
        "calculation(40,10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "teKhB5JQH0Qi"
      },
      "source": [
        "**Q3:  Write a function that sums the elements of a list of integers.**\n",
        "\n",
        "* Write a function that multiplies the elements of an integer list.\n",
        "\n",
        "* Use the two functions to sum the elements whose position is an even number (0,2,4â€¦) and multiply the rest.\n",
        "\n",
        "Hint: Consider extracting two lists from a first list \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0bDWqmXFH0Qi"
      },
      "outputs": [],
      "source": [
        "def list_sum(l):\n",
        "    s = 0\n",
        "    for i in l :\n",
        "        s=s+i\n",
        "    return s\n",
        "def list_mult(k):\n",
        "    m = 1\n",
        "    for p in k :\n",
        "        m=m*p\n",
        "    return m"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "knoRkLnXH0Qj",
        "outputId": "bfd9c3e7-65d8-4bad-ac0b-78a681141001"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n",
            "90\n"
          ]
        }
      ],
      "source": [
        "my_list=[3,5,2,9,4,2,7]\n",
        "even_list, odd_list = [],[]\n",
        "for i,j in zip(range(0,len(my_list)+1,2), range(1,len(my_list),2)):\n",
        "  even_list.append(my_list[i])\n",
        "  odd_list.append(my_list[j])\n",
        "print(list_sum(even_list))\n",
        "print(list_mult(odd_list))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_list=[3,5,2,9,4,2,7]\n",
        "even_list, odd_list = [],[]\n",
        "for i in range(0,len(my_list)-1,2):\n",
        "  even_list.append(my_list[i])\n",
        "  odd_list.append(my_list[i+1])\n",
        "print(list_sum(even_list))\n",
        "print(list_mult(odd_list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AaxrBX_wS5g5",
        "outputId": "20a764c7-9d39-43ac-9ffc-25a3e0fb5880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n",
            "90\n",
            "[5, 9, 2]\n",
            "[3, 2, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Q4: Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.**\n",
        "\n",
        "Sample Items : green-red-yellow-black-white\n",
        "\n",
        "Expected Result : black-green-red-white-yellow\n",
        "\n",
        "Hint : There's a sort function for lists\n",
        "\n"
      ],
      "metadata": {
        "id": "4ilzk7UaIFj2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def hyphen(h):\n",
        "  dh= list(h.split(\"-\"))\n",
        "  dh.sort()\n",
        "  dh = \"-\".join(dh)\n",
        "  return dh"
      ],
      "metadata": {
        "id": "1j65e3M7IR47"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(hyphen(\"green-red-yellow-black-white\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e8qjugPqJhnn",
        "outputId": "69fd1b39-2630-4799-b0b2-b9c47af34402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "black-green-red-white-yellow\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "base",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.15"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "2fa2e302ee291b77fee4ff8e7d2ce4167d62bf135230eea5ad7cf413f86524d3"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
