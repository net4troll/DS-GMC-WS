{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNRj88NNWboWCD+UC21sSJ0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/net4troll/DS-GMC-WS/blob/main/Ali_REZOUALI_Checkpoint_3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##question 1\n",
        "\n",
        "Question 1: Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn\n",
        "\n",
        "Sample value of n is 5 \n",
        "\n",
        "Expected Result : 615 (5+55+555)\n",
        "\n"
      ],
      "metadata": {
        "id": "prLj3uVr7LdF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=input()\n",
        "the_sum = int(n)+int(n*2)+int(n*3)\n",
        "print(\"Result is :\" ) \n",
        "the_sum"
      ],
      "metadata": {
        "id": "8fUczJc2iuys",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "128e2710-0d06-4956-944f-ba3bcfd897d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "Result is :\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "615"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##question 2\n",
        "\n",
        "Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.\n"
      ],
      "metadata": {
        "id": "g6ngamX8_Y4Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "given_number=int(input())\n",
        "if given_number % 2 == 0:\n",
        "  print(\"The given number is even\")\n",
        "else:\n",
        "  print(\"The given number is odd\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gy_x0_HL_eKP",
        "outputId": "7e68e565-7be8-43c7-ef80-8f597bdd36f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-2\n",
            "The given number is even\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "##Question 3 \n",
        "\n",
        "Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included). The numbers obtained should be printed in a sequence on a single line."
      ],
      "metadata": {
        "id": "OkzwzVnLCD9Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_list=[]\n",
        "for i in range(2000,3201):\n",
        "  if(i%7==0) and (i%5!=0):\n",
        "    my_list.append(i)\n",
        "print(my_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BvTjNnKkDITm",
        "outputId": "950b3480-458b-43f2-9bd2-93a3a6c8930c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2002, 2009, 2016, 2023, 2037, 2044, 2051, 2058, 2072, 2079, 2086, 2093, 2107, 2114, 2121, 2128, 2142, 2149, 2156, 2163, 2177, 2184, 2191, 2198, 2212, 2219, 2226, 2233, 2247, 2254, 2261, 2268, 2282, 2289, 2296, 2303, 2317, 2324, 2331, 2338, 2352, 2359, 2366, 2373, 2387, 2394, 2401, 2408, 2422, 2429, 2436, 2443, 2457, 2464, 2471, 2478, 2492, 2499, 2506, 2513, 2527, 2534, 2541, 2548, 2562, 2569, 2576, 2583, 2597, 2604, 2611, 2618, 2632, 2639, 2646, 2653, 2667, 2674, 2681, 2688, 2702, 2709, 2716, 2723, 2737, 2744, 2751, 2758, 2772, 2779, 2786, 2793, 2807, 2814, 2821, 2828, 2842, 2849, 2856, 2863, 2877, 2884, 2891, 2898, 2912, 2919, 2926, 2933, 2947, 2954, 2961, 2968, 2982, 2989, 2996, 3003, 3017, 3024, 3031, 3038, 3052, 3059, 3066, 3073, 3087, 3094, 3101, 3108, 3122, 3129, 3136, 3143, 3157, 3164, 3171, 3178, 3192, 3199]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Question 4\n",
        "\n",
        "Write a program which can compute the factorial of a given numbers. The results should be printed in a sequence on a single line. Suppose the following input is supplied to the program: 8 Then, the output should be: 40320 \n",
        "\n"
      ],
      "metadata": {
        "id": "1prXy1_6EY_E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "n = int(input())\n",
        "print(\"Factorial of\",n , \"is\", math.factorial(n))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rwngL0jcEmSY",
        "outputId": "39dae24e-79c8-44e7-ae6d-1854465e7ad2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "Factorial of 8 is 40320\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Question 5\n",
        "\n",
        "Write a program to remove the characters which have odd index values of a given string.\n",
        "\n",
        "for example: string =\"hello team\"\n",
        "\n",
        "result should be: hlota"
      ],
      "metadata": {
        "id": "qbqjqzreFfMm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "string=\"hello team\"\n",
        "string2=\"\"\n",
        "for i in range(0,len(string),2):\n",
        "  string2= string2 + string[i]\n",
        "print(string2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_8n0RCR2FlL4",
        "outputId": "628122fb-a1e7-4120-cc37-14b1c38cec75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hlota\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "string=\"hello team\"\n",
        "string2=\"\"\n",
        "for i in range(len(string)):\n",
        "  if i % 2 == 0:\n",
        "    string2= string2 + string[i]\n",
        "print(string2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AjkYdBToIDz4",
        "outputId": "d835357f-82bb-4c98-829e-3f5a7c204e76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hlota\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "string=\"hello team\"\n",
        "string2=[]\n",
        "for i in range(len(string)):\n",
        "  if i % 2 == 0:\n",
        "    string2.append(string[i])\n",
        "print(\"_\".join(string2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ZbtwVQ4reNd",
        "outputId": "edeebaa1-1692-4924-d67d-8429220103ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "h_l_o_t_a\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "string2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kgkBLjf4r2BZ",
        "outputId": "3129808f-cff4-452b-8a2d-37348bdeabd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['h', 'l', 'o', 't', 'a']"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "string=\"hello team\"\n",
        "string2=\"\"\n",
        "for i in range(len(string)):\n",
        "  if i % 2 == 0:\n",
        "    string2 = string2 + string[i]\n",
        "print(string2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UNsY8Wj8GU58",
        "outputId": "58f1dba2-e70d-497d-d66b-b0caa71fc079"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hlota\n"
          ]
        }
      ]
    }
  ]
}
